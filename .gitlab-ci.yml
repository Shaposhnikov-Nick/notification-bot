stages:
  - test
  - package
  - push
  - deploy

variables:
  IMAGE_NAME: "$CI_REGISTRY_IMAGE/$NOTIFICATION_BOT_APP_NAME"
  IMAGE_TAG: "latest"
  DOCKER_DRIVER: "overlay2"
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  FULL_DEPLOY_DIR: "$DEPLOY_MAIN_DIR$DEPLOY_DIR"

test:
  stage: test
  image: maven:3.9.6-eclipse-temurin-21
  script:
    - echo "Testing the code..."
    - mvn clean test

build:
  stage: package
  image: maven:3.9.6-eclipse-temurin-21
  script:
    - echo "Compiling the code..."
    - mvn clean package -DskipTests
  artifacts:
    paths:
      - target/*.jar
    expire_in: 1 week

push:
  stage: push
  image: docker:28.0.0-rc.3-dind
  before_script:
    - until docker info; do sleep 1; done;
  services:
    - name: docker:28.0.0-rc.3-dind
      alias: docker
      command: ["--host=tcp://0.0.0.0:2375", "--tls=false"]
  script:
    - echo "Logging into GitLab Container Registry..."
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
    - echo "Building Docker image..."
    - docker build -t $IMAGE_NAME:$IMAGE_TAG .
    - echo "Pushing image to GitLab Container Registry..."
    - docker push $IMAGE_NAME:$IMAGE_TAG
  only:
    - main
  dependencies:
    - build

deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H $SERVER_HOST >> ~/.ssh/known_hosts
  script:
    - echo "Deploying microservice on server..."
    - ssh $SERVER_USER@$SERVER_HOST "
      echo 'Logging into GitLab Container Registry...' &&
      echo '$CI_REGISTRY_PASSWORD' | docker login -u '$CI_REGISTRY_USER' --password-stdin $CI_REGISTRY &&
      echo 'Stopping old container (if running)...' &&
      docker stop $NOTIFICATION_BOT_APP_NAME || true &&
      docker rm $NOTIFICATION_BOT_APP_NAME || true &&
      echo 'Removing old image (if exists)...' &&
      docker rmi $IMAGE_NAME:$IMAGE_TAG || true &&
      echo 'Pulling the latest image...' &&
      docker pull $IMAGE_NAME:$IMAGE_TAG &&
      echo 'Starting new container...' &&
      docker run -d --name $NOTIFICATION_BOT_APP_NAME 
      --restart always 
      -p $SERVER_PORT:$SERVER_PORT 
      -e SERVER_PORT=$SERVER_PORT 
      -e BOT_NAME=$BOT_NAME 
      -e BOT_TOKEN=$BOT_TOKEN 
      -e OWNER_CHAT_ID=$OWNER_CHAT_ID 
      -e GITLAB_TOKEN=$GITLAB_TOKEN 
      $IMAGE_NAME:$IMAGE_TAG
      "
  only:
    - main